set cut_paste_input [stack 0]
version 10.0 v4
push $cut_paste_input
Write {
file "K:/Freelance/Bug/5-SHOTS/001/Bug_001_013/Comp/_Renders/Event_Version 1_0001_0013_comp_v001/A007C012_231214_R51W_comp_v001.%07d.dpx"
file_type dpx
first {{parent.Read1.first}}
last {{parent.Read1.last}}
use_limit true
checkHashOnRead false
version 4
beforeRender "\n2\n3\nimport os\nif not os.path.isdir(os.path.dirname(nuke.thisNode()\['file'].evaluate())):\n  os.makedirs(os.path.dirname(nuke.thisNode()\['file'].evaluate()))"
name BugWrite_1
tile_color 0xff2600ff
label "\nProject Root: \[value proj_root]\nShot Root: \[value shot_root]\nScript Name: \[value script]\nShot Name: \[value shot]\nPipeline Step: \[value step]\n"
note_font Verdana
selected true
xpos -496
ypos 2049
addUserKnob {20 User}
addUserKnob {4 renderType l "Render Type" M {Comp Precomp "Denoise Plate" Roto Paint Test "" ""}}
addUserKnob {4 renderFormat l Format M {DPX EXR JPEG MOV}}
addUserKnob {1 customLabel l "Custom Label"}
addUserKnob {1 vers l Version}
vers 001
addUserKnob {22 setPath l "Set Output Path" T "#===============================================================================\n# butWrite_Functionality_v2.py\n# Version: 2.0.0\n# Last Updated: January 24, 2024\n# Author: Nathaniel Caauwe\n# www.NateCow.com\n#===============================================================================\n\n#===============================================================================\n# USAGE:\n#\n# - Execute write node parameters, updated for freelance work on \"Bug\",\n#   in late December 2023 / Early January 2024\n# - No longer writing to J drive, just right where the files belong on SSD.\n# - Utilizing custom delivery names for DPX Comp renders only.\n#===============================================================================\n\n#===============================================================================\n# Example strings:\n# \[project]_\[sequence]_\[shot number]_\[pipeline step]_\[descriptor]_\[version].\[frame].\[extention]\n# bug_001_001_cmp_main_v001.1001.exr\n# Nuke filepath for script:\n# K\n#===============================================================================\n\n\n#===============================================================================\n#  Drop-down menus; merely getting index of selection.\n#  Probably a way to pull the actual string value,\n#  but I probably had trouble getting that to work\n#===============================================================================\nrenderTypeSelection = int(nuke.thisNode().knob('renderType').getValue())\nrenderFormatSelection = int(nuke.thisNode().knob('renderFormat').getValue())\n\nrenderTypeDict = \{\n    0: \"cmp\",\n    1: \"prc\",\n    2: \"plt_DN\",\n    3: \"rto\",\n    4: \"pnt\",\n    5: \"test\",\n\}\n\npipelineStepDict = \{\n    \"cmp\": \"Comp\",\n    \"prc\": \"Precomps\",\n    \"plt_DN\": \"_Plates\",\n    \"rto\": \"Roto\",\n    \"pnt\": \"Paint\",\n    \"test\": \"Precomps\"\n\}\n\nrenderTypeStr = renderTypeDict.get(renderTypeSelection)\n\nrenderFormatDict = \{\n    0: \"dpx\",\n    1: \"exr\",\n    2: \"jpg\",\n    3: \"mov\"\n\}\n\nrenderFormatExt = renderFormatDict.get(renderFormatSelection)\n\n# Several of these knobs are filters within the read node that breakdown the directory path and return sections of it.\n# \ncustomLabelStr = str(nuke.thisNode().knob('customLabel').getValue()) # A text field for user to add custom labeling - bug_001_001_cmp_\[customLabelStr]_v001\nversionStr = str(nuke.thisNode().knob('vers').getValue())\ndirRoot = str(nuke.thisNode().knob('proj_root').getValue())\nshotRoot = str(nuke.thisNode().knob('shot_root').getValue())\nprojName = dirRoot.split('/')\[2]\nscriptStep = str(nuke.thisNode().knob('step').getValue())\ndirShot = str(nuke.thisNode().knob('shot').getValue())\ndirScript = str(nuke.thisNode().knob('script').getValue())\n\nif renderTypeSelection == 2:\n    dirLabel = \"\"\nelif len(nuke.thisNode().knob('customLabel').getValue()) > 0: #no custom label\n    dirLabel = \"_\" + str(nuke.thisNode().knob('customLabel').getValue())\nelse:\n    dirLabel = \"_main\"\n\n#===============================================================================\n# I know a .join('_') would go a long way for putting some elements together.\n# I just have to make sure everything is clean and doesn't already have an understore in it.\n#===============================================================================\n\nshotBaseDir = str(dirRoot+\"/\"+ dirShot +\"/\")    #do we need this?\nrenderFileName = dirShot + \"_\" + renderTypeStr + dirLabel + \"_v\" + versionStr\n\nclientNameDict = \{\n    \"Bug_001_001\": \"A001C007_231213_R51W\",\n    \"Bug_001_002\": \"A001C007_231213_R51W\",\n    \"Bug_001_003\": \"A001C012_231213_R51W\",\n    \"Bug_001_004\": \"A001C023_231213_R51W\",\n    \"Bug_001_005\": \"A001C025_231213_R51W\",\n    \"Bug_001_006\": \"A001C030_231213_R51W\",\n    \"Bug_001_007\": \"A003C017_231214_R51W\",\n    \"Bug_001_008\": \"A003C014_231213_R51W\",\n    \"Bug_001_009\": \"A005C024_231214_R51W\",\n    \"Bug_001_010\": \"A005C021_231214_R51W\",\n    \"Bug_001_011\": \"A002C016_231213_R51W\",\n    \"Bug_001_012\": \"A004C027_231214_R51W\",\n    \"Bug_001_013\": \"A007C012_231214_R51W\",\n    \"Bug_002_001\": \"A005C006_231214_R51W\", # TV Shot\n    \"Bug_002_002\": \"A005C005_231214_R51W\", # TV Shot\n    \"Bug_002_003\": \"A005C006_231214_R51W\"  # TV Shot\n\}\n\nif renderTypeSelection == 0: #dpx\n    shotNumber = dirShot.split('_')\[2]          #dirShot returns bug_001_001 so splits into list and grabs the last 3 digits\n    subFolder = \"Comp/_Renders/Event_Version 1_0001_0\" + shotNumber + \"_comp_v\" + versionStr\n    clientName = clientNameDict\[dirShot]\nelif renderTypeSelection == 2:\n    subFolder = \"_Plates/Denoised/\"\nelif renderTypeSelection == 3:\n    subFolder = \"Roto/_Renders/\"\nelif renderTypeSelection == 4:\n    subFolder = \"Paint/_Renders\"\nelse:\n    subFolder = \"Precomps/_Renders/\"\n\nrenderDir = (shotRoot + \"/\" + subFolder)\n    \nif nuke.thisNode().knob('renderFormat').getValue() == 3: #QT movie\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt)\n    nuke.thisNode().knob('file').setValue(renderDir + renderFileName + \"/\" + renderFormatExt + \"/\" + renderFileName + \".\" + renderFormatExt)\nelif nuke.thisNode().knob('renderFormat').getValue() == 0: #DPX for Bug only\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt)\n    nuke.thisNode().knob('file').setValue(renderDir + \"/\" + clientName + \"_comp_v\" + versionStr + \".%0\" + \"7d.\" + renderFormatExt)\nelse:\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt)\n    nuke.thisNode().knob('file').setValue(renderDir + renderFileName + \"/\" + renderFormatExt + \"/\" + renderFileName + \".%0\" + \"4d.\" + renderFormatExt)\n\nif nuke.thisNode().knob('renderFormat').getValue() == 2: #jpeg sequence\n    nuke.thisNode().knob('file_type').setValue('jpeg')\n    nuke.thisNode().knob('_jpeg_quality').setValue('1')\n\n\n# Llamas. That is all." +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 note l Note: T "Adjust path fragments so that your project root matches your heirarchy.\nThis node (The Shift 2023) assumes:\nK:/NateCowVFX/TheShift/5-SHOTS/Shot/Comp/Nuke\nas the current project's location."}
addUserKnob {20 pathFragments l "Path Fragments" n 1}
addUserKnob {1 proj_root l "Project Root"}
proj_root "\[join \[lrange \[split \[value root.name] / ] 0 7 ] / ]"
addUserKnob {1 shot_root l "Shot Root"}
shot_root "\[join \[lrange \[split \[value root.name] / ] 0 5 ] / ]"
addUserKnob {1 step l "Pipeline Step"}
step "\[join \[lrange \[split \[value root.name] / ] 6 6 ] / ]"
addUserKnob {1 shot l "Shot Name"}
shot "\[lrange \[split \[value root.name] / ] 5 5 ]"
addUserKnob {1 script l "Script Name"}
script "\[file rootname \[file tail \[value root.name] ] ]"
addUserKnob {20 endGroup n -1}
}
