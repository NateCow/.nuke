set cut_paste_input [stack 0]
version 10.0 v4
push $cut_paste_input
Write {
 file K:/Projects/cd4k_vfx/5-SHOTS/001/cd4k_001_001/Comp/_Renders/cd4k_001_001_cmp_main_v001/exr/cd4k_001_001_cmp_main_v001.%04d.exr
 file_type exr
 version 4
 beforeRender "\n2\n3\nimport os\nif not os.path.isdir(os.path.dirname(nuke.thisNode()\['file'].evaluate())):\n  os.makedirs(os.path.dirname(nuke.thisNode()\['file'].evaluate()))"
 name CowWrite2024_1
 tile_color 0x9fffff
 label "\nProject Root: \[value proj_root]\nShot Root: \[value shot_root]\nScript Name: \[value script]\nShot Name: \[value shot]\nPipeline Step: \[value step]\n"
 note_font Verdana
 selected true
 xpos -229
 ypos 280
 addUserKnob {20 User}
 addUserKnob {4 renderType l "Render Type" M {Comp Precomp "Denoise Plate" Roto Paint Test "" ""}}
 addUserKnob {4 renderFormat l Format M {DPX EXR JPEG MOV}}
 renderFormat EXR
 addUserKnob {1 customLabel l "Custom Label"}
 addUserKnob {1 vers l Version}
 vers 001
 addUserKnob {22 setPath l "Set Output Path" T "#===============================================================================\n# cowWrite_Functionality.py\n# Version: 1.0.0\n# Last Updated: February 26, 2024\n# Author: Nathaniel Caauwe\n# www.NateCow.com\n#===============================================================================\n\n#===============================================================================\n# USAGE:\n#\n# - Execute write node parameters, updated for freelance work on \"Bug\",\n#   in late December 2023 / Early January 2024\n# - No longer writing to J drive, just right where the files belong on SSD.\n# - Utilizing custom delivery names for DPX Comp renders only.\n#===============================================================================\n\n#===============================================================================\n# Example strings:\n# \[project]_\[sequence]_\[shot number]_\[pipeline step]_\[descriptor]_\[version].\[frame].\[extension]\n# Bug_001_013_cmp_main_v001.1001.exr\n# Example Nuke filepath for script (root.name within Nuke):\n# K:/Freelance/Bug/5-SHOTS/001/Bug_001_013/Comp/Nuke/bug_001_013_cmp_main_v001.nk\n#===============================================================================\n\n\n#===============================================================================\n#  Drop-down menus; returns index of selection\n#  and then matches that to dictionary keys in renderTypeDict and renderFormatDict\n#  Probably a way to pull the actual string value,\n#  but I probably had trouble getting that to work\n#  I need a better way to name the dictionaries; I don't like 'dict' :P \n#===============================================================================\nrenderTypeSelection = int(nuke.thisNode().knob('renderType').getValue())\nrenderFormatSelection = int(nuke.thisNode().knob('renderFormat').getValue())\n\nrenderTypeDict = \{\n    0: \"cmp\",\n    1: \"prc\",\n    2: \"plt_DN\",\n    3: \"rto\",\n    4: \"pnt\",\n    5: \"test\",\n\}\n\npipelineStepDict = \{\n    \"cmp\": \"Comp\",\n    \"prc\": \"Precomps\",\n    \"plt_DN\": \"_Plates\",\n    \"rto\": \"Roto\",\n    \"pnt\": \"Paint\",\n    \"test\": \"Precomps\"\n\}\n\nrenderTypeStr = renderTypeDict.get(renderTypeSelection)\n\nrenderFormatDict = \{\n    0: \"dpx\",\n    1: \"exr\",\n    2: \"jpg\",\n    3: \"mov\"\n\}\n\nrenderFormatExt = renderFormatDict.get(renderFormatSelection)\n\n#===============================================================================\n# Several of these knobs are filters within the read node that breakdown the directory path and return sections of it.\n# Example Nuke filepath for script (root.name within Nuke):\n# K:/Freelance/Bug/5-SHOTS/001/Bug_001_013/Comp/Nuke/bug_001_013_cmp_main_v001.nk\n# Following variables extract either from user text fields or slicing up the root.name\n#===============================================================================\ncustomLabelStr = str(nuke.thisNode().knob('customLabel').getValue()) # User field: Bug_001_013_cmp_\[customLabelStr]_v001 (uses 'main' by default (line 87))\nversionStr = str(nuke.thisNode().knob('vers').getValue())            # User field: Bug_001_013_cmp_main_v\[versionStr]\ndirRoot = str(nuke.thisNode().knob('proj_root').getValue())          # From root: 'K:/Freelance/Bug/5-SHOTS/001/Bug_001_013/Comp/Nuke'\nshotRoot = str(nuke.thisNode().knob('shot_root').getValue())         # From root: 'K:/Freelance/Bug/5-SHOTS/001/Bug_001_013'\nprojName = dirRoot.split('/')\[2]                                     # From root: 'Bug'\nscriptStep = str(nuke.thisNode().knob('step').getValue())            # From root: 'Comp'\ndirShot = str(nuke.thisNode().knob('shot').getValue())               # From root: 'Bug_001_013'\ndirScript = str(nuke.thisNode().knob('script').getValue())           # From root: 'Bug_001_013_cmp_main_v001'\n\nif renderTypeSelection == 2: # Line 37\n    dirLabel = \"\"            # Ensures \"plt_DN\" in the case of \"Denoise Plate\" selection.\n                             # Custom label needs to be blank as renderTypeStr on line 55 will assign \"plt_DN\" as both the render type (plate) AND custom label (denoise (DN))\nelif len(nuke.thisNode().knob('customLabel').getValue()) > 0: # Any text detected in custom label field gets assigned here.\n    dirLabel = \"_\" + str(nuke.thisNode().knob('customLabel').getValue())\nelse: # Otherwise assume \"main\". Hard-coding the underscore is stupid.\n    dirLabel = \"_main\"\n\n#===============================================================================\n# I know a .join('_') would go a long way for putting some elements together.\n# I just have to make sure everything is clean and doesn't already have an understore in it. (See comment on line 86)\n#===============================================================================\n\nshotBaseDir = str(dirRoot+\"/\"+ dirShot +\"/\")    # This might have been an older variable. We have shotRoot on line 75 that producees the same thing except without the trailing \"/\"\nrenderFileName = dirShot + \"_\" + renderTypeStr + dirLabel + \"_v\" + versionStr   # Name for render without frame padding or file exension - Bug_001_013_cmp_main_v001.\n                                                                                # Note in the case of Bug, this doesn't get used for cmp_main renders. I write out to the client name below.\n\nif renderTypeSelection == 0:\n    subFolder = \"Comp/_Renders/\"\nelif renderTypeSelection == 2:\n    subFolder = \"_Plates/Denoised/\"\nelif renderTypeSelection == 3:\n    subFolder = \"Roto/_Renders/\"\nelif renderTypeSelection == 4:\n    subFolder = \"Paint/_Renders/\"\nelse:\n    subFolder = \"Precomps/_Renders/\"\n\nrenderDir = (shotRoot + \"/\" + subFolder)\n    \nif nuke.thisNode().knob('renderFormat').getValue() == 3: # QT movie\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt)\n    nuke.thisNode().knob('file').setValue(renderDir + renderFileName + \"/\" + renderFormatExt + \"/\" + renderFileName + \".\" + renderFormatExt)\nelse:\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt) # Image Sequences\n    nuke.thisNode().knob('file').setValue(renderDir + renderFileName + \"/\" + renderFormatExt + \"/\" + renderFileName + \".%0\" + \"4d.\" + renderFormatExt)\n\nif nuke.thisNode().knob('renderFormat').getValue() == 2: # Knobs specific to jpegs that need set, thus why this is a seperate conditional.\n    nuke.thisNode().knob('file_type').setValue('jpeg')\n    nuke.thisNode().knob('_jpeg_quality').setValue('1')\n\n\n\n\n\n\n\n# Llamas. That is all." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 note l Note: T "Adjust path fragments so that your project root matches your heirarchy.\nThis node (The Shift 2023) assumes:\nK:/NateCowVFX/TheShift/5-SHOTS/Shot/Comp/Nuke\nas the current project's location."}
 addUserKnob {20 pathFragments l "Path Fragments" n 1}
 addUserKnob {1 proj_root l "Project Root"}
 proj_root "\[join \[lrange \[split \[value root.name] / ] 0 7 ] / ]"
 addUserKnob {1 shot_root l "Shot Root"}
 shot_root "\[join \[lrange \[split \[value root.name] / ] 0 5 ] / ]"
 addUserKnob {1 step l "Pipeline Step"}
 step "\[join \[lrange \[split \[value root.name] / ] 6 6 ] / ]"
 addUserKnob {1 shot l "Shot Name"}
 shot "\[lrange \[split \[value root.name] / ] 5 5 ]"
 addUserKnob {1 script l "Script Name"}
 script "\[file rootname \[file tail \[value root.name] ] ]"
 addUserKnob {20 endGroup n -1}
}
