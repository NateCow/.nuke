set cut_paste_input [stack 0]
version 10.0 v4
push $cut_paste_input
Write {
 file K:/Freelance/Tonal/5-SHOTS/000/TNL_000_027/Comp/_Renders/TNL_000_027_cmp_main_v002/exr/TNL_000_027_cmp_main_v002.%04d.exr
 file_type exr
 version 4
 beforeRender "\n2\n3\nimport os\nif not os.path.isdir(os.path.dirname(nuke.thisNode()\['file'].evaluate())):\n  os.makedirs(os.path.dirname(nuke.thisNode()\['file'].evaluate()))"
 name CowWrite2024
 tile_color 0x9fffff
 label "\nCustom Label: \[knob customLabel]\nCustom Version: \[knob vers]"
 note_font "Verdana Bold Bold Bold Bold"
 note_font_size 12
 selected true
 xpos -230
 ypos 1978
 addUserKnob {20 User}
 addUserKnob {4 pipeSelect l "Pipeline Step" M {Comp Precomp "Denoise Plate" Roto Paint Test Plate "" "" ""}}
 addUserKnob {4 renderFormat l Format M {DPX EXR JPEG MOV}}
 renderFormat EXR
 addUserKnob {1 customLabel l "Custom Label" t "If unspecified, will default to \"main.\""}
 addUserKnob {26 customLabelNote l "" +STARTLINE T "If Custom Label is empty, renders will take on \"main\" as their descriptor.\nDenoise plates will be \"DN\" by default but can be overridden to \"DN\[yourtext]\""}
 addUserKnob {1 vers l Version t "If unspecified, will inheret current project version."}
 addUserKnob {26 versionNote l "" +STARTLINE T "Version will pull from the current project version by default.\nUse this if you need to override that."}
 addUserKnob {22 setPath l "Set Output Path" t "Click to set file output directory based on parameters above." T "import nuke\nimport cowOnLoad\n\npipeCodeUserSelect = int(nuke.thisNode().knob('pipeSelect').getValue())\nrenderFormatUserSelect = int(nuke.thisNode().knob('renderFormat').getValue())\n\npipeCodeSelect = \{\n    0: \"cmp\",\n    1: \"prc\",\n    2: \"plt_DN\",\n    3: \"roto\",\n    4: \"pnt\",\n    5: \"test\",\n    6: \"plt\"\n\}\n\npipeCodeFolder = \{\n    \"cmp\": \"Comp/_Renders\",\n    \"prc\": \"Precomps/_Renders\",\n    \"plt_DN\": \"_Plates/Denoised\",\n    \"roto\": \"Roto/_Renders\",\n    \"pnt\": \"Paint/_Renders\",\n    \"test\": \"Precomps/_Renders\",\n    \"plt\": \"_Plates\"\n\}\n\nrenderTypeStr = pipeCodeSelect.get(pipeCodeUserSelect)\npipeFolder = pipeCodeFolder\[renderTypeStr]\n\nrenderFormatSelect = \{\n    0: \"dpx\",\n    1: \"exr\",\n    2: \"jpg\",\n    3: \"mov\"\n\}\n\nrenderFormatExt = renderFormatSelect.get(renderFormatUserSelect)\n\n#===============================================================================\n# Remapping variables from cowOnLoad.roundUpVariables()\n#===============================================================================\n\ncurrentDescriptor = cowOnLoad.currentDescriptor\ncurrentSceneDir = cowOnLoad.currentSceneDir\ncurrentPipeStep = cowOnLoad.currentPipeStep\ncurrentVersionStr = cowOnLoad.currentVersionStr\ncurrentSceneNameFull = cowOnLoad.currentSceneNameFull\n\n\n#===============================================================================\n# Example Nuke filepath for script (root.name within Nuke):\n# K:/Freelance/Bug/5-SHOTS/001/bug_001_013/Comp/Nuke/bug_001_013_cmp_main_v001.nk\n# Following variables extract either from user text fields or slicing up the root.name\n#===============================================================================\ncustomLabelStr = str(nuke.thisNode().knob('customLabel').getValue())        # User field: Bug_001_013_cmp_\[customLabelStr]_v001 (uses 'main' by default (see below))\nversionUserDefined = str(nuke.thisNode().knob('vers').getValue())           # User field: Bug_001_013_cmp_main_v\[versionUserDefined]\n\nif pipeCodeUserSelect == 2:\n    if len(customLabelStr) > 0:\n        renderLabel = \"plt_DN\" + str(nuke.thisNode().knob('customLabel').getValue())       # If custom label is filled in on Denoise Plate selection, label is \"DN\[customLabel]\"\n    else:\n        renderLabel = \"plt_DN\"\nelif len(customLabelStr) > 0: # Any text detected in custom label field gets assigned here.\n    renderLabel = customLabelStr\nelse: # Otherwise assume \"main\". Hard-coding the underscore is stupid.\n    renderLabel = currentDescriptor\n\nif len(versionUserDefined) > 0:\n    versionForOutput = versionUserDefined\nelse:\n    versionForOutput = currentVersionStr\n\n\n\nrenderDir = currentSceneDir + '/' + pipeFolder\nif pipeCodeUserSelect == 2:\n    renderFilenameList = \[currentSceneNameFull, renderLabel, \"v\" + versionForOutput]\n    renderFileName = \"_\".join(renderFilenameList)\nelse:\n    renderFilenameList = \[currentSceneNameFull, renderTypeStr, renderLabel, \"v\" + versionForOutput]\n    renderFileName = \"_\".join(renderFilenameList)\n#renderFileName = currentSceneNameFull + \"_\" + renderTypeStr + renderLabel + \"_v\" + versionUserDefined   # Name for render without frame padding or file exension - Bug_001_013_cmp_main_v001.\n                                                                                # Note in the case of Bug, this doesn't get used for cmp_main renders. I write out to the client name below.\n\npipeFolder = pipeCodeFolder\[renderTypeStr]\n#renderDir = (shotRoot + \"/\" + pipeFolder)\n#fileOutputListQT = \[renderDir, renderFileName, renderFormatExt]\n#fileOutputListImageSeq =  \[renderDir, renderFileName,]\n\n    \nif nuke.thisNode().knob('renderFormat').getValue() == 3: # QT movie\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt)\n    nuke.thisNode().knob('file').setValue(renderDir + \"/\" + renderFileName + \".\" + renderFormatExt)\nelse:\n    nuke.thisNode().knob('file_type').setValue(renderFormatExt) # Image Sequences\n    nuke.thisNode().knob('file').setValue(renderDir + \"/\" + renderFileName + \"/\" + renderFormatExt + \"/\" + renderFileName + \".%0\" + \"4d.\" + renderFormatExt)\n\nif nuke.thisNode().knob('renderFormat').getValue() == 2: # Knobs specific to jpegs that need set, thus why this is a seperate conditional.\n    nuke.thisNode().knob('file_type').setValue('jpeg')\n    nuke.thisNode().knob('_jpeg_quality').setValue('1')\n\noutputDir = nuke.thisNode().knob('file').getValue()\noutputMessage = \"File out directory set to: \" + outputDir\n#print(\"test\")\n#print(\"llamas\")\nprint(outputMessage)\n\n# Llamas. That is all." +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {22 refresh l "Refresh Project Variables" t "This will likely need to be refreshed if you've versioned up without re-opening the script." T "import nuke\nimport cowOnLoad\n\ncowOnLoad.roundUpVariables()" +STARTLINE}
 addUserKnob {20 endGroup n -1}
}
